A]] Brute force: O(n²) → for every element, check how far consecutive numbers extend.

B]] Your sorted+set approach: O(n log n).
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        
        
        nums1=sorted(set(nums))
        if len(nums1)==0:
            return 0
        elif len(nums1)==1:
            return 1
        max_count=float('-inf')
        i=0
        j=1
        count=1
        while j<len(nums1):
            if nums1[j]==nums1[i]+1:
                count+=1
            
            else:
                count=1  # because of cases like [1,100]
            max_count=max(max_count,count)
            i+=1
            j+=1
            
        return max_count
        

        

C]] Optimal (hashset): O(n)
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        s=sorted(set(nums)) # converted to list
        if not s:
            return 0
        length=1
        maxlength=1
    
        for i in range(1,len(s)):
            if s[i]==s[i-1]+1:
                length+=1
            else:
                length=1
            maxlength=max(maxlength,length)
        return maxlength
        


