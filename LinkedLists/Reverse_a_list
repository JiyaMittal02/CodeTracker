THERE EXISTS TOTAL OF THREE APPROACHES FOR THIS QUESTION
#BRUTE FORCE--- CONVERT TO ARRAY REVERSE IT AND THEN AGAIN BACK TO LL


##OPTIMIZED --- USE THREE POINTERS TO KEEP TRACK AND PERFORM REVERSAL IN A SINGLE PASS

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        prev=None
        nex=None
        curr=head
        while(curr!=None):
            nex=curr.next
            curr.next=prev
            prev=curr
            curr=nex
        head=prev
        return head
TC-O(N), SC-O(1)

##RECURSION APPROACH---
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if (not head) or (not head.next):
            return head
        newhead=self.reverseList(head.next) #inside the class SELF keyword is important
        head.next.next=head   # head=3 so head.next is 4 although 4.next should be none but we reverse it by saying head.next.next=head , 4 points at 3
        head.next=None
        return newhead #because head is always one step behind the newhead,hence newhead is the one that is the actual head of the reversed list

        TC-O(N),SC-O(N) [because of stack space taken up by recursive call stack that equals to n calls]



        
