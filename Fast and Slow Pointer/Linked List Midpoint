# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        slow=fast=head
        while fast and fast.next:   # this is used because for lists of odd length when fast.next is null slow reached middle but for lists of even length when
                                     fast is null the slow reaches middle
            fast=fast.next.next
            slow=slow.next
        return slow

BY THE TIME FAST REACHES NTH OF LIST SLOW ENDS UP AT N/2TH OF THE LIST

3 CASES
1. EVEN LIST GET ME 2ND NODE
2. EVEN LIST GET ME 1ST NODE
3. ODD LIST 
