##BRUTE FORCE APPROACH=== HASHSET COMPARES REFRENCES OF NODES NOT THEIR VALUES
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        # brute force
        s=set()
        temp=head
        while temp:
            if temp in s:
                return True
            s.add(temp)
            temp=temp.next
        return False
SPACE---O(N)

OPTIMIZED --- FAST AND SLOW POINTER===
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
         
        slow=head
        fast=head
     
        while fast!=None and fast.next!=None:
            slow=slow.next
            fast=fast.next.next
            
            if slow==fast:
                return True
        return False
         
SPACE---O(1)
        
